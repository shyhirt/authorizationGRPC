// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"authorizationGRPC/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq             = user.LoginReq
	LoginResp            = user.LoginResp
	RefreshReq           = user.RefreshReq
	RegReq               = user.RegReq
	RegResp              = user.RegResp
	UserInfoReq          = user.UserInfoReq
	UserInfoResp         = user.UserInfoResp
	VerificationCodeReq  = user.VerificationCodeReq
	VerificationCodeResp = user.VerificationCodeResp

	User interface {
		Registration(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		CheckVerificationCode(ctx context.Context, in *VerificationCodeReq, opts ...grpc.CallOption) (*VerificationCodeResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Registration(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Registration(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) CheckVerificationCode(ctx context.Context, in *VerificationCodeReq, opts ...grpc.CallOption) (*VerificationCodeResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CheckVerificationCode(ctx, in, opts...)
}
